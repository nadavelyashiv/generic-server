services:
  postgres:
    image: postgres:16-alpine
    container_name: auth_server_postgres
    environment:
      POSTGRES_DB: auth_server
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: auth_server_redis
    command: redis-server --appendonly yes --requirepass redispassword
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth_server_app
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:password@postgres:5432/auth_server
      REDIS_URL: redis://:redispassword@redis:6379
      JWT_ACCESS_SECRET: your-super-secret-jwt-access-key-change-this-in-production
      JWT_REFRESH_SECRET: your-super-secret-jwt-refresh-key-change-this-in-production
      SESSION_SECRET: your-super-secret-session-key-change-this-in-production
      CORS_ORIGIN: "http://localhost:3000,http://localhost:5173"
      CLIENT_URL: "http://localhost:5173"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: